<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Deals CRM – Kanban Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  <style>
    :root { color-scheme: light dark; }
    html { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji"; }
    /* Shiny gradient header */
    .shiny {
      background: linear-gradient(110deg, rgba(255,255,255,.25), rgba(255,255,255,0) 40%),
                  linear-gradient(90deg, #22d3ee, #818cf8, #f472b6, #22d3ee);
      background-size: 200% 100%;
      animation: shine 6s linear infinite;
    }
    @keyframes shine { to { background-position: -200% 0; } }

    /* Card hover glow */
    .glow { box-shadow: 0 0 0 0 rgba(99,102,241,0.6); transition: box-shadow .25s ease, transform .15s ease; }
    .glow:hover { box-shadow: 0 10px 30px -12px rgba(99,102,241,0.5); transform: translateY(-2px); }

    /* Drag styling */
    .dragging { opacity: .6; }
    .drop-hover { outline: 3px dashed rgba(129,140,248,.8); outline-offset: -8px; }

    /* Failure shake */
    @keyframes shake { 10%, 90% { transform: translateX(-1px); } 20%, 80% { transform: translateX(2px); } 30%, 50%, 70% { transform: translateX(-4px);} 40%, 60% { transform: translateX(4px);} }
    .shake { animation: shake .5s; }

    /* Modal */
    .modal { backdrop-filter: blur(4px); }

    /* Tiny confetti pieces */
    .confetti-piece { position: fixed; width: 10px; height: 14px; opacity: .9; will-change: transform, opacity; pointer-events: none; }
  </style>
</head>
<body class="bg-slate-50 text-slate-900 dark:bg-slate-900 dark:text-slate-100">
  <!-- Header -->
  <header class="shiny text-white">
    <div class="mx-auto max-w-7xl px-4 py-5 flex items-center justify-between">
      <h1 class="text-2xl sm:text-3xl font-extrabold tracking-tight drop-shadow">Deals CRM – Kanban</h1>
      <div class="flex items-center gap-2">
        <button id="addDealBtn" class="px-4 py-2 rounded-2xl bg-white/10 hover:bg-white/20 text-white font-semibold shadow">
          + Add Deal
        </button>
        <button id="clearAllBtn" class="px-3 py-2 rounded-2xl bg-red-500/80 hover:bg-red-500 text-white font-semibold shadow">
          Clear All
        </button>
      </div>
    </div>
  </header>

  <!-- Toolbar -->
  <div class="mx-auto max-w-7xl px-4 mt-4 flex items-center gap-3">
    <input id="searchInput" type="search" placeholder="Search deals (title / owner)..." class="w-full md:w-96 px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-800 dark:border-slate-700 outline-none focus:ring-2 focus:ring-indigo-400" />
    <select id="ownerFilter" class="px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-800 dark:border-slate-700">
      <option value="">All Owners</option>
    </select>
  </div>

  <!-- Kanban Board -->
  <main class="mx-auto max-w-7xl px-4 py-6 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-5 gap-4">
    <!-- Columns generated by JS -->
  </main>

  <!-- Modal -->
  <div id="dealModal" class="hidden fixed inset-0 z-50 modal bg-black/40 items-center justify-center p-4">
    <div class="w-full max-w-lg rounded-3xl bg-white dark:bg-slate-800 shadow-2xl border border-slate-200 dark:border-slate-700">
      <div class="flex items-center justify-between px-6 pt-5">
        <h3 id="modalTitle" class="text-xl font-bold">Add Deal</h3>
        <button id="closeModal" class="p-2 rounded-xl hover:bg-slate-100 dark:hover:bg-slate-700" aria-label="Close">✕</button>
      </div>
      <form id="dealForm" class="p-6 grid grid-cols-1 gap-4">
        <input type="hidden" id="dealId" />
        <label class="grid gap-1">
          <span class="text-sm">Title<span class="text-pink-500">*</span></span>
          <input id="title" required class="px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-900 dark:border-slate-700" placeholder="e.g., ACME – Annual Subscription" />
        </label>
        <label class="grid gap-1">
          <span class="text-sm">Owner</span>
          <input id="owner" class="px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-900 dark:border-slate-700" placeholder="e.g., Ramya" />
        </label>
        <label class="grid gap-1">
          <span class="text-sm">Value (₹)</span>
          <input id="value" type="number" min="0" step="1" class="px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-900 dark:border-slate-700" placeholder="e.g., 150000" />
        </label>
        <label class="grid gap-1">
          <span class="text-sm">Probability (%)</span>
          <input id="probability" type="number" min="0" max="100" step="1" class="px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-900 dark:border-slate-700" placeholder="e.g., 60" />
        </label>
        <label class="grid gap-1">
          <span class="text-sm">Stage</span>
          <select id="stage" class="px-4 py-2 rounded-xl border border-slate-300/60 bg-white dark:bg-slate-900 dark:border-slate-700"></select>
        </label>
        <div class="flex items-center justify-end gap-2 pt-2">
          <button type="button" id="deleteDealBtn" class="hidden px-4 py-2 rounded-xl bg-red-500 hover:bg-red-600 text-white">Delete</button>
          <button type="submit" class="px-4 py-2 rounded-xl bg-indigo-600 hover:bg-indigo-700 text-white font-semibold shadow">Save</button>
        </div>
      </form>
    </div>
  </div>

  <footer class="mx-auto max-w-7xl px-4 pb-10 text-center text-xs text-slate-500">Local-only demo • Drag & drop between stages • Data persists in your browser.</footer>

  <script>
    /*********************************
     * Simple state + persistence
     *********************************/
    const LS_KEY = 'dealsCRM:v1';
    const DEFAULT_STAGES = [
      { id: 'new', name: 'New' },
      { id: 'contacted', name: 'Contacted' },
      { id: 'qualified', name: 'Qualified' },
      { id: 'proposal', name: 'Proposal' },
      { id: 'won', name: 'Won 🥳' },
      { id: 'lost', name: 'Lost 😬' },
    ];

    const state = {
      stages: DEFAULT_STAGES,
      deals: loadDeals(),
      filters: { q: '', owner: '' }
    };

    function loadDeals() {
      try { return JSON.parse(localStorage.getItem(LS_KEY)) ?? sampleDeals(); }
      catch { return sampleDeals(); }
    }
    function saveDeals() { localStorage.setItem(LS_KEY, JSON.stringify(state.deals)); }
    function sampleDeals() {
      return [
        { id: uid(), title: 'ACME – Annual Subscription', owner: 'Ravi', value: 150000, probability: 60, stage: 'qualified', createdAt: Date.now() },
        { id: uid(), title: 'Globex – Pilot', owner: 'Meera', value: 52000, probability: 30, stage: 'contacted', createdAt: Date.now() },
        { id: uid(), title: 'Initech – Migration', owner: 'Ramya', value: 240000, probability: 70, stage: 'proposal', createdAt: Date.now() }
      ];
    }
    function uid() { return Math.random().toString(36).slice(2) + Date.now().toString(36); }

    /*********************************
     * DOM helpers
     *********************************/
    const $ = sel => document.querySelector(sel);
    const $$ = sel => Array.from(document.querySelectorAll(sel));

    const main = document.querySelector('main');

    // Populate stage options in form
    const stageSelect = $('#stage');
    function fillStageOptions() {
      stageSelect.innerHTML = state.stages.map(s => <option value="${s.id}">${s.name}</option>).join('');
    }

    // Owner filter options
    function updateOwnerFilter() {
      const owners = Array.from(new Set(state.deals.map(d => d.owner).filter(Boolean))).sort();
      const ownerSel = $('#ownerFilter');
      const current = ownerSel.value;
      ownerSel.innerHTML = <option value="">All Owners</option> + owners.map(o => <option value="${o}">${o}</option>).join('');
      ownerSel.value = current;
    }

    /*********************************
     * Rendering
     *********************************/
    function currencyINR(n) { if (n == null || n === '') return '—'; return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 0 }).format(n); }

    function render() {
      updateOwnerFilter();
      const q = state.filters.q.toLowerCase();
      const owner = state.filters.owner;
      const filtered = state.deals.filter(d => {
        const matchesQ = d.title.toLowerCase().includes(q) || (d.owner||'').toLowerCase().includes(q);
        const matchesOwner = !owner || d.owner === owner;
        return matchesQ && matchesOwner;
      });

      main.innerHTML = '';
      for (const stage of state.stages) {
        const items = filtered.filter(d => d.stage === stage.id);
        const total = items.reduce((a,b)=>a + (Number(b.value)||0), 0);
        const col = document.createElement('section');
        col.className = 'rounded-2xl bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 flex flex-col min-h-[280px]';
        col.dataset.stage = stage.id;
        col.innerHTML = `
          <div class="p-4 border-b border-slate-200 dark:border-slate-700 flex items-center justify-between">
            <div class="flex items-center gap-2"><span class="text-sm font-bold uppercase tracking-wide text-slate-500">${stage.name}</span>
              <span class="text-xs px-2 py-0.5 rounded-full bg-slate-100 dark:bg-slate-700">${items.length}</span></div>
            <div class="text-xs text-slate-500">${currencyINR(total)}</div>
          </div>
          <div class="p-3 space-y-3 flex-1" data-dropzone></div>
        `;
        main.appendChild(col);
        const dz = col.querySelector('[data-dropzone]');
        for (const deal of items) dz.appendChild(renderCard(deal));
        enableDropping(col);
      }
    }

    function renderCard(d) {
      const el = document.createElement('article');
      el.className = 'glow rounded-2xl border border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-900 p-3 cursor-grab active:cursor-grabbing';
      el.draggable = true; el.dataset.id = d.id;
      el.innerHTML = `
        <div class="flex items-start justify-between gap-2">
          <h4 class="font-semibold leading-tight">${escapeHtml(d.title)}</h4>
          <button class="p-2 rounded-xl hover:bg-slate-800/5 dark:hover:bg-white/5" data-edit aria-label="Edit">✏</button>
        </div>
        <div class="mt-1 text-sm grid grid-cols-2 gap-x-3 gap-y-1 text-slate-600 dark:text-slate-300">
          <div><span class="text-slate-500">Owner:</span> ${escapeHtml(d.owner||'—')}</div>
          <div><span class="text-slate-500">Value:</span> ${currencyINR(d.value)}</div>
          <div><span class="text-slate-500">Prob.:</span> ${(d.probability??'—')}%</div>
          <div class="col-span-2 text-xs text-slate-500">Created: ${new Date(d.createdAt||Date.now()).toLocaleDateString()}</div>
        </div>
      `;
      // Drag handlers
      el.addEventListener('dragstart', e=> { el.classList.add('dragging'); e.dataTransfer.setData('text/plain', d.id); });
      el.addEventListener('dragend', ()=> el.classList.remove('dragging'));
      // Edit
      el.querySelector('[data-edit]').addEventListener('click', ()=> openModal(d));
      return el;
    }

    function enableDropping(col) {
      const dz = col.querySelector('[data-dropzone]');
      ['dragover','dragenter'].forEach(evt=> dz.addEventListener(evt, e=> { e.preventDefault(); col.classList.add('drop-hover'); }));
      ;['dragleave','drop'].forEach(evt=> dz.addEventListener(evt, ()=> col.classList.remove('drop-hover')));
      dz.addEventListener('drop', e=> {
        e.preventDefault();
        const id = e.dataTransfer.getData('text/plain');
        const deal = state.deals.find(x=>x.id===id);
        if (!deal) return;
        const from = deal.stage;
        const to = col.dataset.stage;
        if (from !== to) {
          deal.stage = to;
          saveDeals();
          render();
          if (to === 'won') { confettiBurst(); ringBell(); }
          if (to === 'lost') { failureShake(); buzz(); }
        }
      });
    }

    /*********************************
     * Modal + CRUD
     *********************************/
    const dealModal = $('#dealModal');
    const modalTitle = $('#modalTitle');
    const dealForm = $('#dealForm');
    const deleteDealBtn = $('#deleteDealBtn');

    function openModal(deal) {
      dealModal.classList.remove('hidden');
      dealModal.classList.add('flex');
      fillStageOptions();
      if (deal) {
        modalTitle.textContent = 'Edit Deal';
        $('#dealId').value = deal.id;
        $('#title').value = deal.title || '';
        $('#owner').value = deal.owner || '';
        $('#value').value = deal.value ?? '';
        $('#probability').value = deal.probability ?? '';
        $('#stage').value = deal.stage || state.stages[0].id;
        deleteDealBtn.classList.remove('hidden');
        deleteDealBtn.onclick = ()=> { removeDeal(deal.id); closeModal(); };
      } else {
        modalTitle.textContent = 'Add Deal';
        dealForm.reset();
        $('#dealId').value = '';
        $('#stage').value = state.stages[0].id;
        deleteDealBtn.classList.add('hidden');
        deleteDealBtn.onclick = null;
      }
    }
    function closeModal() { dealModal.classList.add('hidden'); dealModal.classList.remove('flex'); }

    $('#addDealBtn').addEventListener('click', ()=> openModal());
    $('#closeModal').addEventListener('click', closeModal);
    dealModal.addEventListener('click', (e)=> { if (e.target === dealModal) closeModal(); });

    dealForm.addEventListener('submit', (e)=>{
      e.preventDefault();
      const id = $('#dealId').value || uid();
      const payload = {
        id,
        title: $('#title').value.trim(),
        owner: $('#owner').value.trim(),
        value: Number($('#value').value || 0),
        probability: Number($('#probability').value || 0),
        stage: $('#stage').value,
        createdAt: $('#dealId').value ? (state.deals.find(d=>d.id===id)?.createdAt || Date.now()) : Date.now(),
      };
      if (!payload.title) {
        failureShake(); buzz();
        return;
      }
      const idx = state.deals.findIndex(d=>d.id===id);
      if (idx>=0) { state.deals[idx] = payload; }
      else { state.deals.push(payload); confettiBurst(); ringBell(); }
      saveDeals();
      closeModal();
      render();
    });

    function removeDeal(id) {
      state.deals = state.deals.filter(d=>d.id!==id);
      saveDeals();
      render();
    }

    $('#clearAllBtn').addEventListener('click', ()=>{
      if (confirm('This will delete ALL deals stored in your browser. Continue?')) {
        state.deals = [];
        saveDeals();
        render();
        buzz();
      }
    });

    // Search + filters
    $('#searchInput').addEventListener('input', (e)=> { state.filters.q = e.target.value; render(); });
    $('#ownerFilter').addEventListener('change', (e)=> { state.filters.owner = e.target.value; render(); });

    /*********************************
     * Fun UX: confetti + sounds + failure reaction
     *********************************/
    function confettiBurst() {
      // Lightweight confetti without external libs
      const colors = ['#22d3ee','#818cf8','#f472b6','#fbbf24','#34d399','#60a5fa'];
      const N = 80;
      const dur = 1200;
      const w = window.innerWidth, h = window.innerHeight;
      for (let i=0;i<N;i++) {
        const c = document.createElement('div');
        c.className = 'confetti-piece';
        c.style.background = colors[Math.floor(Math.random()*colors.length)];
        c.style.left = Math.random()*w + 'px';
        c.style.top = '-20px';
        c.style.transform = translate3d(0,0,0) rotate(${Math.random()*360}deg);
        document.body.appendChild(c);
        const x = (Math.random()*2-1) * 120; // lateral drift
        const y = h + Math.random()*100;
        const rot = (Math.random()*2-1)*720;
        const start = performance.now();
        function step(t){
          const p = Math.min(1,(t-start)/dur);
          c.style.transform = translate(${x*p}px, ${y*p}px) rotate(${rot*p}deg);
          c.style.opacity = 1-p;
          if (p<1) requestAnimationFrame(step); else c.remove();
        }
        requestAnimationFrame(step);
      }
    }

    // Web Audio tiny sfx
    let audioCtx;
    function ctx() { return audioCtx || (audioCtx = new (window.AudioContext||window.webkitAudioContext)()); }

    function ringBell() { // pleasant chime
      const ac = ctx();
      const o = ac.createOscillator();
      const g = ac.createGain();
      o.type = 'sine';
      o.frequency.setValueAtTime(880, ac.currentTime);
      o.frequency.exponentialRampToValueAtTime(440, ac.currentTime + 0.25);
      g.gain.setValueAtTime(0.0001, ac.currentTime);
      g.gain.exponentialRampToValueAtTime(0.2, ac.currentTime + 0.01);
      g.gain.exponentialRampToValueAtTime(0.0001, ac.currentTime + 0.5);
      o.connect(g).connect(ac.destination);
      o.start(); o.stop(ac.currentTime + 0.55);
    }
    function buzz() { // failure
      const ac = ctx();
      const o = ac.createOscillator();
      const g = ac.createGain();
      o.type = 'square';
      o.frequency.setValueAtTime(120, ac.currentTime);
      o.frequency.linearRampToValueAtTime(60, ac.currentTime + 0.3);
      g.gain.setValueAtTime(0.0001, ac.currentTime);
      g.gain.exponentialRampToValueAtTime(0.25, ac.currentTime + 0.02);
      g.gain.exponentialRampToValueAtTime(0.0001, ac.currentTime + 0.35);
      o.connect(g).connect(ac.destination);
      o.start(); o.stop(ac.currentTime + 0.4);
      if (navigator.vibrate) navigator.vibrate(120);
    }

    function failureShake() {
      const el = document.querySelector('header');
      el.classList.add('shake');
      setTimeout(()=> el.classList.remove('shake'), 500);
    }

    function escapeHtml(s){ return s.replace(/[&<>"']/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c])); }

    /*********************************
     * Init
     *********************************/
    fillStageOptions();
    render();
  </script>
</body>
</html>
